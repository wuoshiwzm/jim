package testjava;

import java.io.File;
import java.util.Scanner;
import java.util.Stack;

public class exercise_3_23<AnyType> {

	public static void main(String[] args) {
		InFixToPostFix();
		
//		  String s = "Strings are immutable";
//	      char result = s.charAt(7);
//	      System.out.println(result);
		
		
//		String input = "1 fish 2 fish red fish blue fish";
//		Scanner ss = new Scanner(input).useDelimiter("\\s*fish\\s*");
//		System.out.println(ss.nextInt());
//		System.out.println(ss.nextInt());
//		System.out.println(ss.next());
//		System.out.println(ss.next());
//
//		ss.close();
	}

	static void InFixToPostFix() {
		Stack<Character> s = new Stack<Character>();
		String expression="1+5*(3+6)";
		Character token;
		int i = 0;

		Scanner sc = new Scanner(System.in);
		//±í´ïÊ½
		expression = "1+5*3=";

		while ((token = expression.charAt(i++)) != '=') {
			if (token >= 'a' && token <= 'z')
				System.out.print(token + "");
			else {
				switch (token) {
				case ')':
					while (!s.empty() && s.peek() != '(') {
						System.out.print(s.pop() + "");
					}
					s.pop();
					break;

				case '(':
					s.push(token);
					break;

				case '^':
					while (!s.empty() && !(s.peek() == '^' || s.peek() == '(')) {
						System.out.print(s.pop());
					}
					s.push(token);
					break;

				case '*':

				case '/':
					while (!s.empty() && s.peek() != '+' &&
					s.peek() != '-' && s.peek() != '(') {
						System.out.print(s.pop());
					}
					s.push(token);
					break;

				case '+':
				case '-':
					while (!s.empty() && s.peek() != '(') {
						System.out.print(s.pop() + " ");
					}
					s.push(token);
					break;

				}

			}
		}
		while(!s.empty()){
			System.out.print(s.pop());
		}
		System.out.println();

	}

	static double evalPostFix() {
		Stack<Double> s = new Stack<Double>();
		String token;
		Double a, b, result = 0.0;
		boolean isNumber;

		Scanner sc = new Scanner(System.in);

		token = sc.next();

		while (token.charAt(0) != '=') {
			try {
				isNumber = true;
				result = Double.parseDouble(token);
			} catch (Exception e) {
				isNumber = false;
			}

			if (isNumber) {
				s.push(result);
			} else {
				switch (token.charAt(0)) {
				case '+':
					a = s.pop();
					b = s.pop();
					s.push(a + b);
					break;
				case '-':
					a = s.pop();
					b = s.pop();
					s.push(a - b);
					break;
				case '*':
					a = s.pop();
					b = s.pop();
					s.push(a * b);
					break;
				case '/':
					a = s.pop();
					b = s.pop();
					s.push(a / b);
					break;
				}
			}
			token = sc.next();
		}
		return s.peek();
	}

}
