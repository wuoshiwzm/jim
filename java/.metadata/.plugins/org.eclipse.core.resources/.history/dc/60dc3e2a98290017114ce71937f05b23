package testjava.exercise_3.exercise_4;

public class MyTreeSet<AnyType extends Comparable<? super AnyType>> {

	private static class BinaryNode<AnyType> {
		BinaryNode(AnyType theElement) {
			this(theElement, null, null, null);
		}

		BinaryNode(AnyType theElement, BinaryNode<AnyType> lt, BinaryNode<AnyType> rt, BinaryNode<AnyType> pt) {
			element = theElement;
			left = lt;
			right = rt;
			parent = pt;
		}

		AnyType element;
		BinaryNode<AnyType> left;
		BinaryNode<AnyType> right;
		BinaryNode<AnyType> parent;
	}

	
	public java.util.Iterator<AnyType> iterator(){
		return new MyTreeIterator();
	}
	
	private class MyTreeIterator implements java.util.Iterator<AnyType>{
		private BinaryNode<AnyType> current = findMin(root);
		private BinaryNode<AnyType> previous = previous;
		private int expectedModCount = modCount;
		private boolean okToRemove=false;
		private boolean atEnd=false;
		
		public boolean hasNext(){
			return !atEnd;
		}
		
		public AnyType next(){
			if(modCount !=expectedModCount){
				throw new java.util.ConcurrentModificationException();
				}
			if(!hasNext()){
				throw new java.util.NoSuchElementException();
			}
			
			AnyType nextItem = current.element;
			
			previous = current;
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
